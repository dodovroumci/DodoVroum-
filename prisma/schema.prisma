// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle Utilisateur
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CLIENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings  Booking[]
  reviews   Review[]
  favorites Favorite[]
  payments  Payment[]

  @@map("users")
}

// Modèle Résidence
model Residence {
  id          String   @id @default(cuid())
  title       String
  description String
  address     String
  city        String
  country     String
  pricePerDay Float
  capacity    Int
  bedrooms    Int
  bathrooms   Int
  amenities   String[] // Array de strings pour les équipements
  images      String[] // Array d'URLs d'images
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]
  reviews  Review[]
  offers   Offer[]
  favorites Favorite[]

  @@map("residences")
}

// Modèle Véhicule
model Vehicle {
  id          String   @id @default(cuid())
  brand       String
  model       String
  year        Int
  type        VehicleType
  pricePerDay Float
  capacity    Int
  fuelType    String
  transmission String
  features    String[] // Array de strings pour les équipements
  images      String[] // Array d'URLs d'images
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]
  reviews  Review[]
  offers   Offer[]
  favorites Favorite[]

  @@map("vehicles")
}

// Modèle Offre Combinée
model Offer {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  discount    Float?   // Pourcentage de réduction
  isActive    Boolean  @default(true)
  validFrom   DateTime
  validTo     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  residenceId String
  residence   Residence @relation(fields: [residenceId], references: [id])
  vehicleId   String
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
  bookings    Booking[]

  @@map("offers")
}

// Modèle Réservation
model Booking {
  id          String        @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  residenceId String?
  residence   Residence?  @relation(fields: [residenceId], references: [id])
  vehicleId   String?
  vehicle     Vehicle?    @relation(fields: [vehicleId], references: [id])
  offerId     String?
  offer       Offer?      @relation(fields: [offerId], references: [id])
  payments    Payment[]
  reviews     Review[]

  @@map("bookings")
}

// Modèle Paiement
model Payment {
  id          String        @id @default(cuid())
  amount      Float
  currency    String        @default("EUR")
  status      PaymentStatus @default(PENDING)
  method      PaymentMethod
  transactionId String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  bookingId   String
  booking     Booking   @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

// Modèle Avis
model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 étoiles
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  bookingId   String
  booking     Booking   @relation(fields: [bookingId], references: [id])
  residenceId String?
  residence   Residence? @relation(fields: [residenceId], references: [id])
  vehicleId   String?
  vehicle     Vehicle?   @relation(fields: [vehicleId], references: [id])

  @@map("reviews")
}

// Modèle Favoris
model Favorite {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  residenceId String?
  residence   Residence? @relation(fields: [residenceId], references: [id])
  vehicleId   String?
  vehicle     Vehicle?   @relation(fields: [vehicleId], references: [id])

  @@unique([userId, residenceId])
  @@unique([userId, vehicleId])
  @@map("favorites")
}

// Enums
enum UserRole {
  ADMIN
  CLIENT
}

enum VehicleType {
  CAR
  MOTORCYCLE
  BICYCLE
  SCOOTER
  VAN
  TRUCK
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  CASH
  MOBILE_MONEY
}
